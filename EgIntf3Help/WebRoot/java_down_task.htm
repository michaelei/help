<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>无标题文档</title>
<script type="text/javascript" src="js/comm.js"></script>
<link href="js/comm.css" rel="stylesheet" type="text/css" />
</head>

<body>
<p class="info-title">下行命令的一般步骤 </p>
<p class="paddingleft10">1：创建下行命令的对象，这些对象都是 com.eg.intf3.msg.BasicMsg 的子类</p>
<p class="paddingleft10">2：使用控制台对象下发该命令，并指定好任务监听器。如：console.dispatchTask(msg,new MyOneTaskListner());</p>
<p class="paddingleft10">3：在自定义监听器MyOneTaskListner中对任务的各个状态进行监控处理</p>
<p class="info-title">自定义任务状态监听器</p>
<p class="paddingleft10">针对每个下行命令，EgIntf3会生成一个下行任务，APP可以对每个下行的任务指定一个自定义的状态监听器，从而在任务的不同状态执行不同的操作。</p>
<p class="paddingleft10">任务状态列表如下：</p>
<table width="95%" border="1" cellspacing="0">
  <tr>
    <td align="center" style="width:100px;font-weight:bold;">状态</td>
    <td align="center" style="width:200px;font-weight:bold;">值</td>
    <td align="center">说明</td>
  </tr>
  <tr>
    <td>创建</td>
    <td>Task.STATE_CREATE</td>
    <td>任务刚刚创建，排队等待处理</td>
  </tr>
  <tr>
    <td>等待</td>
    <td>Task.STATE_WAIT</td>
    <td>任务已受理，但是由于主控器未联机等原因，处于等待下发中</td>
  </tr>
  <tr>
    <td>处理中</td>
    <td>Task.STATE_PROCESSING</td>
    <td>任务已经下发给主控器了，但是仍未收到处理结果</td>
  </tr>
  <tr>
    <td>完成</td>
    <td>Task.STATE_COMPLETE</td>
    <td>收到主控器的回复，任务已经完成，此时可以根据resultCode知道该任务是否成功了</td>
  </tr>
  <tr>
    <td>超时</td>
    <td>Task.STATE_TIMEOUT</td>
    <td>任务超时</td>
  </tr>
  <tr>
    <td>异常</td>
    <td>Task.STATE_EXCEPTION</td>
    <td>任务生命周期中发生了异常</td>
  </tr>
  <tr>
    <td>成功</td>
    <td>&nbsp;</td>
    <td>该任务成功完成了</td>
  </tr>
  <tr>
    <td>失败</td>
    <td>&nbsp;</td>
    <td>该任务失败了，包括超时和异常</td>
  </tr>
</table>
<p>&nbsp;</p>
<p class="paddingleft10">自定义任务状态监听器一般在 console.dispatchTask 时候直接创建，可以通过两种方式创建：</p>
<p class="info-title">第一种：实现 com.eg.intf3.listener.OneTaskStateChangeListner 接口中的所有方法</p>
<blockquote>
  <p>console.dispatchTask(msg, new OneTaskStateChangeListner() {<br />
    <br />
  <blockquote>
    @Override<br />
    public void onCreate(Task task) {<br />
    <span class="text-anno">//任务创建</span><br />
    }<br />
  <br />
    @Override<br />
    public void onWait(Task task) {<br />
    <span class="text-anno">//任务等待</span><br />
    }<br />
  <br />
    @Override<br />
    public void onProcessing(Task task) {<br />
    <span class="text-anno">//任务处理</span><br />
    }<br />
  <br />
    @Override<br />
    public void onComplete(Task task) {<br />
    <span class="text-anno">//任务完成</span><br />
    }<br />
  <br />
    @Override<br />
    public void onTimeout(Task task) {<br />
    <span class="text-anno">//任务超时</span><br />
    }<br />
  <br />
    @Override<br />
    public void onException(Task task) {<br />
    <span class="text-anno">//任务异常</span><br />
    }<br />
  <br />
    @Override<br />
    public void onSuccess(Task task) {<br />
    <span class="text-anno">//任务成功</span><br />
    }<br />
  <br />
    @Override<br />
    public void onFail(Task task) {<br />
    <span class="text-anno">//任务失败</span><br />
    }<br />
  <br />
  </blockquote>
    });</p>
</blockquote>
<p class="info-title">第二种：继承 com.eg.intf3.listener.OneTaskStateChangeAdapter 并实现其中若干方法</p>
<p class="paddingleft10">OneTaskStateChangeAdapter已经实现了OneTaskStateChangeListner接口，只不过各个方法均不处理，APP中可以自定义扩展该类，从而仅仅实现其中若干个方法即可。</p>
<blockquote>
  <p>console.dispatchTask(msg, new OneTaskStateChangeAdapter(){<br />
  <blockquote>
    @Override<br />
    public void onSuccess(Task task) {<br />
    <span class="text-anno">//任务成功</span><br />
    }<br />
  <br />
    @Override<br />
    public void onFail(Task task) {<br />
    <span class="text-anno">//任务失败</span><br />
    }<br />
  </blockquote>
    });</p>
</blockquote>
</body>
</html>
